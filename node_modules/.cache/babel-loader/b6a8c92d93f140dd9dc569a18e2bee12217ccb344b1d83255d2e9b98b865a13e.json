{"ast":null,"code":"var _jsxFileName = \"D:\\\\SSD Backup\\\\Desktop\\\\HTML-KIKO\\\\Advanced 2022 JS Projects\\\\2023 React\\\\react-nodejs-trivia app\\\\react-node-trivia-app\\\\src\\\\components\\\\Quiz.js\";\nimport React, { Component } from \"react\";\n// import QuizParams from \"./QuizParams\";\nimport \"../App.css\";\n\n// send variable from Categories, and do apiKeys[cat].name...etc\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // questionData: null,\n      currentQuestionIndex: 0,\n      questionAnswered: false\n    };\n    this.putQuestion = this.putQuestion.bind(this);\n    this.createAnswers = this.createAnswers.bind(this);\n    this.verifyAnswer = this.verifyAnswer.bind(this);\n  }\n  // results is undefined\n  render() {\n    console.log(this.props.data);\n    // let questionDataa;\n    // this.setState({ questionData: this.props.data }, () => {\n    //   questionDataa = this.state.questionData;\n    // }); // how can i only send questionDataa after callback\n    let multipleChoice = true;\n    if (this.props.data[this.state.currentQuestionIndex.type] == \"multiple\") {\n      console.log(\"MULTIPLE\");\n      multipleChoice = true;\n    }\n    let counter = 0;\n    // console.log(this.props);\n    console.log(this.props.nbQuestions);\n    while (this.state.currentQuestionIndex < this.props.nbQuestions) {\n      if (multipleChoice) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"K.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"quizDiv\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.putQuestion(this.props.data, multipleChoice)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"DONE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  createAnswers() {\n    let answers = [this.state.questionsData];\n    const inputElements = Array.from({\n      length: 4\n    }, (_, index) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"buttonAnswer\";\n      button.value = this.props.data[0];\n      return button;\n    });\n    inputElements.sort(() => Math.random() - 0.5);\n    inputElements.forEach(input => {\n      document.querySelector(\"form\").appendChild(input);\n    });\n  }\n  putQuestion(questionData, multipleChoice) {\n    if (multipleChoice) {\n      // let answerIndex = this.state.currentAnswerIndex;\n      let answerIndex = 0;\n      let currentQuestionIndex = this.state.currentQuestionIndex;\n      console.log(currentQuestionIndex);\n\n      //put nb of questions chosen in state variable and do a for loop on (while the questions have not run out)\n\n      while (this.state.questionAnswered != true) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"divQuestions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: questionData[currentQuestionIndex].question\n          }, currentQuestionIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answersDiv\",\n            children: this.putAnswers(this.props.data, multipleChoice)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this);\n      }\n      // call a method that, for each object will put all answers in a  array, then\n      // randomize it and then create divs in js and append p elements with answers\n      // this.setState({ currentQuestionIndex: 0 });\n    } else if (multipleChoice == false) {}\n  }\n  putAnswers(data, multipleChoice) {\n    let allAnswers = [];\n    let currentQuestionIndex = this.state.currentQuestionIndex;\n    let correctAnswer = data[currentQuestionIndex].correct_answer;\n    let badAnswers = data[currentQuestionIndex].incorrect_answers;\n    console.log(correctAnswer);\n    if (multipleChoice) {\n      allAnswers.push(correctAnswer, badAnswers[0], badAnswers[1], badAnswers[2]);\n      const answerElements = allAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answerDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"answerButton\",\n          onClick: event => this.verifyAnswer(answer, event),\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this));\n\n      // Return the array of answer elements\n      return answerElements;\n    }\n  }\n  async verifyAnswer(answer, event) {\n    const targetButton = event.target;\n    console.log(targetButton);\n    let data = this.props.data;\n    let correctAnswer = data[this.state.currentQuestionIndex].correct_answer;\n    console.log(this.state.currentQuestionIndex);\n    this.setState(prevState => ({\n      currentQuestionIndex: prevState.currentQuestionIndex + 1\n    }), () => {\n      console.log(this.state.currentQuestionIndex);\n    });\n    let color;\n    if (answer == correctAnswer) {\n      color = \"green\";\n      // console.log(\"ANSWER CORRECT\");\n\n      //add a classname witha  transition to green\n    } else {\n      color = \"red\";\n    }\n    targetButton.style.backgroundColor = color;\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    targetButton.style.backgroundColor = \"\";\n\n    // changeQuestion\n    // mkae button white again\n    // add points if correct\n    //add to questions answered\n    // return true;\n  }\n}\n\nexport default Quiz;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Quiz","constructor","state","currentQuestionIndex","questionAnswered","putQuestion","bind","createAnswers","verifyAnswer","render","console","log","props","data","multipleChoice","type","counter","nbQuestions","children","fileName","_jsxFileName","lineNumber","columnNumber","id","answers","questionsData","inputElements","Array","from","length","_","index","button","document","createElement","className","value","sort","Math","random","forEach","input","querySelector","appendChild","questionData","answerIndex","question","putAnswers","allAnswers","correctAnswer","correct_answer","badAnswers","incorrect_answers","push","answerElements","map","answer","onClick","event","targetButton","target","setState","prevState","color","style","backgroundColor","Promise","resolve","setTimeout"],"sources":["D:/SSD Backup/Desktop/HTML-KIKO/Advanced 2022 JS Projects/2023 React/react-nodejs-trivia app/react-node-trivia-app/src/components/Quiz.js"],"sourcesContent":["import React, { Component } from \"react\";\n// import QuizParams from \"./QuizParams\";\nimport \"../App.css\";\n\n// send variable from Categories, and do apiKeys[cat].name...etc\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // questionData: null,\n      currentQuestionIndex: 0,\n      questionAnswered: false,\n    };\n    this.putQuestion = this.putQuestion.bind(this);\n    this.createAnswers = this.createAnswers.bind(this);\n    this.verifyAnswer = this.verifyAnswer.bind(this);\n  }\n  // results is undefined\n  render() {\n    console.log(this.props.data);\n    // let questionDataa;\n    // this.setState({ questionData: this.props.data }, () => {\n    //   questionDataa = this.state.questionData;\n    // }); // how can i only send questionDataa after callback\n    let multipleChoice = true;\n    if (this.props.data[this.state.currentQuestionIndex.type] == \"multiple\") {\n      console.log(\"MULTIPLE\");\n      multipleChoice = true;\n    }\n    let counter = 0;\n    // console.log(this.props);\n    console.log(this.props.nbQuestions);\n    while (this.state.currentQuestionIndex < this.props.nbQuestions) {\n      if (multipleChoice) {\n        return (\n          <div>\n            <h1>K.</h1>\n            <div id=\"quizDiv\">\n              <div>{this.putQuestion(this.props.data, multipleChoice)}</div>\n            </div>\n          </div>\n        );\n      }\n    }\n    return <h1>DONE</h1>;\n  }\n\n  createAnswers() {\n    let answers = [this.state.questionsData];\n\n    const inputElements = Array.from({ length: 4 }, (_, index) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"buttonAnswer\";\n      button.value = this.props.data[0];\n      return button;\n    });\n\n    inputElements.sort(() => Math.random() - 0.5);\n\n    inputElements.forEach((input) => {\n      document.querySelector(\"form\").appendChild(input);\n    });\n  }\n  putQuestion(questionData, multipleChoice) {\n    if (multipleChoice) {\n      // let answerIndex = this.state.currentAnswerIndex;\n      let answerIndex = 0;\n      let currentQuestionIndex = this.state.currentQuestionIndex;\n      console.log(currentQuestionIndex);\n\n      //put nb of questions chosen in state variable and do a for loop on (while the questions have not run out)\n\n      while (this.state.questionAnswered != true) {\n        return (\n          <div className=\"divQuestions\">\n            {\n              <h2 key={currentQuestionIndex}>\n                {questionData[currentQuestionIndex].question}\n              </h2>\n            }\n            <div className=\"answersDiv\">\n              {this.putAnswers(this.props.data, multipleChoice)}\n            </div>\n          </div>\n        );\n      }\n      // call a method that, for each object will put all answers in a  array, then\n      // randomize it and then create divs in js and append p elements with answers\n      // this.setState({ currentQuestionIndex: 0 });\n    } else if (multipleChoice == false) {\n    }\n  }\n\n  putAnswers(data, multipleChoice) {\n    let allAnswers = [];\n    let currentQuestionIndex = this.state.currentQuestionIndex;\n    let correctAnswer = data[currentQuestionIndex].correct_answer;\n    let badAnswers = data[currentQuestionIndex].incorrect_answers;\n    console.log(correctAnswer);\n    if (multipleChoice) {\n      allAnswers.push(\n        correctAnswer,\n        badAnswers[0],\n        badAnswers[1],\n        badAnswers[2]\n      );\n      const answerElements = allAnswers.map((answer, index) => (\n        <div key={index} className=\"answerDiv\">\n          <button\n            type=\"button\"\n            className=\"answerButton\"\n            onClick={(event) => this.verifyAnswer(answer, event)}\n            key={index}\n          >\n            {answer}\n          </button>\n        </div>\n      ));\n\n      // Return the array of answer elements\n      return answerElements;\n    }\n  }\n\n  async verifyAnswer(answer, event) {\n    const targetButton = event.target;\n    console.log(targetButton);\n    let data = this.props.data;\n    let correctAnswer = data[this.state.currentQuestionIndex].correct_answer;\n    console.log(this.state.currentQuestionIndex);\n    this.setState(\n      (prevState) => ({\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n      }),\n      () => {\n        console.log(this.state.currentQuestionIndex);\n      }\n    );\n    let color;\n    if (answer == correctAnswer) {\n      color = \"green\";\n      // console.log(\"ANSWER CORRECT\");\n\n      //add a classname witha  transition to green\n    } else {\n      color = \"red\";\n    }\n\n    targetButton.style.backgroundColor = color;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    targetButton.style.backgroundColor = \"\";\n\n    // changeQuestion\n    // mkae button white again\n    // add points if correct\n    //add to questions answered\n    // return true;\n  }\n}\nexport default Quiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}