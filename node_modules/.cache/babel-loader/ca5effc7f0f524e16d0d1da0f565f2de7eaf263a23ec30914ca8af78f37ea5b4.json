{"ast":null,"code":"var _jsxFileName = \"D:\\\\SSD Backup\\\\Desktop\\\\HTML-KIKO\\\\Advanced 2022 JS Projects\\\\2023 React\\\\react-nodejs-trivia app\\\\react-node-trivia-app\\\\src\\\\components\\\\Quiz.js\";\nimport React, { Component } from \"react\";\n// import QuizParams from \"./QuizParams\";\nimport \"../App.css\";\n\n// send variable from Categories, and do apiKeys[cat].name...etc\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // questionData: null,\n      currentQuestionIndex: 0,\n      questionAnswered: false\n    };\n    this.putQuestion = this.putQuestion.bind(this);\n    this.createAnswers = this.createAnswers.bind(this);\n  }\n  // results is undefined\n  render() {\n    console.log(this.props.data);\n    // let questionDataa;\n    // this.setState({ questionData: this.props.data }, () => {\n    //   questionDataa = this.state.questionData;\n    // }); // how can i only send questionDataa after callback\n    let multipleChoice = true;\n    if (this.props.data[this.state.currentQuestionIndex.type] == \"multiple\") {\n      console.log(\"MULTIPLE\");\n      multipleChoice = true;\n    }\n    let counter = 0;\n    // console.log(this.props);\n    if (multipleChoice) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"K.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"quizDiv\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.putQuestion(this.props.data, multipleChoice)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  createAnswers() {\n    let answers = [this.state.questionsData];\n    const inputElements = Array.from({\n      length: 4\n    }, (_, index) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"buttonAnswer\";\n      button.value = this.props.data[0];\n      return button;\n    });\n\n    // Shuffle the array\n    inputElements.sort(() => Math.random() - 0.5);\n\n    // Append input elements to the body\n    inputElements.forEach(input => {\n      document.querySelector(\"form\").appendChild(input);\n    });\n  }\n  putQuestion(questionData, multipleChoice) {\n    if (multipleChoice) {\n      // this.questionData.forEach((question) => {\n      //   console.log(question.category);\n      // });\n      // let answerIndex = this.state.currentAnswerIndex;\n      let answerIndex = 0;\n      let currentQuestionIndex = this.state.currentQuestionIndex;\n      console.log(currentQuestionIndex);\n\n      //put nb of questions chosen in state variable and do a for loop on (while the questions have not run out)\n\n      while (this.state.questionAnswered != true) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"divQuestions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: questionData[currentQuestionIndex].question\n          }, currentQuestionIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answersDiv\",\n            children: this.putAnswers(this.props.data)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this);\n      }\n      // call a method that, for each object will put all answers in a  array, then\n      // randomize it and then create divs in js and append p elements with answers\n      this.setState({\n        currentQuestionIndex: 0\n      });\n\n      // this.setState((prevState) => ({\n      //   counter: (prevState.counter + 1) % 3, // Increment and reset to 0 when it reaches 3\n      // }));\n      // if (this.state.questionsAnswered) {\n      //   this.setState((prevState) => ({\n      //     counter: 0, // Increment and reset to 0 when it reaches 3\n      //   }));\n      // }\n    } else if (multipleChoice == false) {}\n  }\n  putAnswers(data, multipleChoice) {\n    let allQuestions = [];\n    let currentQuestionIndex = this.state.currentQuestionIndex;\n    let correctAnswer = data[currentQuestionIndex].correct_answer;\n    let badAnswers = data[currentQuestionIndex].incorrect_answers;\n    console.log(correctAnswer);\n    if (multipleChoice) {\n      allQuestions.push(correctAnswer, badAnswers[0], badAnswers[1], badAnswers[2]);\n    }\n  }\n}\nexport default Quiz;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Quiz","constructor","state","currentQuestionIndex","questionAnswered","putQuestion","bind","createAnswers","render","console","log","props","data","multipleChoice","type","counter","children","fileName","_jsxFileName","lineNumber","columnNumber","id","answers","questionsData","inputElements","Array","from","length","_","index","button","document","createElement","className","value","sort","Math","random","forEach","input","querySelector","appendChild","questionData","answerIndex","question","putAnswers","setState","allQuestions","correctAnswer","correct_answer","badAnswers","incorrect_answers","push"],"sources":["D:/SSD Backup/Desktop/HTML-KIKO/Advanced 2022 JS Projects/2023 React/react-nodejs-trivia app/react-node-trivia-app/src/components/Quiz.js"],"sourcesContent":["import React, { Component } from \"react\";\n// import QuizParams from \"./QuizParams\";\nimport \"../App.css\";\n\n// send variable from Categories, and do apiKeys[cat].name...etc\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // questionData: null,\n      currentQuestionIndex: 0,\n      questionAnswered: false,\n    };\n    this.putQuestion = this.putQuestion.bind(this);\n    this.createAnswers = this.createAnswers.bind(this);\n  }\n  // results is undefined\n  render() {\n    console.log(this.props.data);\n    // let questionDataa;\n    // this.setState({ questionData: this.props.data }, () => {\n    //   questionDataa = this.state.questionData;\n    // }); // how can i only send questionDataa after callback\n    let multipleChoice = true;\n    if (this.props.data[this.state.currentQuestionIndex.type] == \"multiple\") {\n      console.log(\"MULTIPLE\");\n      multipleChoice = true;\n    }\n    let counter = 0;\n    // console.log(this.props);\n    if (multipleChoice) {\n      return (\n        <div>\n          <h1>K.</h1>\n          <div id=\"quizDiv\">\n            <div>{this.putQuestion(this.props.data, multipleChoice)}</div>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  createAnswers() {\n    let answers = [this.state.questionsData];\n\n    const inputElements = Array.from({ length: 4 }, (_, index) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"buttonAnswer\";\n      button.value = this.props.data[0];\n      return button;\n    });\n\n    // Shuffle the array\n    inputElements.sort(() => Math.random() - 0.5);\n\n    // Append input elements to the body\n    inputElements.forEach((input) => {\n      document.querySelector(\"form\").appendChild(input);\n    });\n  }\n  putQuestion(questionData, multipleChoice) {\n    if (multipleChoice) {\n      // this.questionData.forEach((question) => {\n      //   console.log(question.category);\n      // });\n      // let answerIndex = this.state.currentAnswerIndex;\n      let answerIndex = 0;\n      let currentQuestionIndex = this.state.currentQuestionIndex;\n      console.log(currentQuestionIndex);\n\n      //put nb of questions chosen in state variable and do a for loop on (while the questions have not run out)\n\n      while (this.state.questionAnswered != true) {\n        return (\n          <div className=\"divQuestions\">\n            {\n              <h2 key={currentQuestionIndex}>\n                {questionData[currentQuestionIndex].question}\n              </h2>\n            }\n            <div className=\"answersDiv\">{this.putAnswers(this.props.data)}</div>\n          </div>\n        );\n      }\n      // call a method that, for each object will put all answers in a  array, then\n      // randomize it and then create divs in js and append p elements with answers\n      this.setState({ currentQuestionIndex: 0 });\n\n      // this.setState((prevState) => ({\n      //   counter: (prevState.counter + 1) % 3, // Increment and reset to 0 when it reaches 3\n      // }));\n      // if (this.state.questionsAnswered) {\n      //   this.setState((prevState) => ({\n      //     counter: 0, // Increment and reset to 0 when it reaches 3\n      //   }));\n      // }\n    } else if (multipleChoice == false) {\n    }\n  }\n\n  putAnswers(data, multipleChoice) {\n    let allQuestions = [];\n    let currentQuestionIndex = this.state.currentQuestionIndex;\n    let correctAnswer = data[currentQuestionIndex].correct_answer;\n    let badAnswers = data[currentQuestionIndex].incorrect_answers;\n    console.log(correctAnswer);\n    if (multipleChoice) {\n      allQuestions.push(\n        correctAnswer,\n        badAnswers[0],\n        badAnswers[1],\n        badAnswers[2]\n      );\n    }\n  }\n}\nexport default Quiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}