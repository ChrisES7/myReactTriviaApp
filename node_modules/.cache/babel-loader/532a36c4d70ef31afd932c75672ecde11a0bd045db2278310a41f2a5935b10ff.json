{"ast":null,"code":"var _jsxFileName = \"D:\\\\SSD Backup\\\\Desktop\\\\HTML-KIKO\\\\Advanced 2022 JS Projects\\\\2023 React\\\\react-nodejs-trivia app\\\\react-node-trivia-app\\\\src\\\\components\\\\Quiz.js\";\nimport React, { Component } from \"react\";\n// import QuizParams from \"./QuizParams\";\nimport \"../App.css\";\n\n// send variable from Categories, and do apiKeys[cat].name...etc\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionData: null,\n      currentIndex: 0\n    };\n    this.putQuestion = this.putQuestion.bind(this);\n    this.createAnswers = this.createAnswers.bind(this);\n  }\n  // results is undefined\n  render() {\n    console.log(this.props.data);\n    let questionDataa;\n    this.setState({\n      questionData: this.props.data\n    }, () => {\n      questionDataa = this.state.questionData;\n      console.log(this.state.questionData);\n      console.log(questionDataa);\n    }); // how can i only send questionDataa after callback\n    let multipleChoice = true;\n    if (this.propsData[this.state.currentIndex.type] == \"multiple\") {\n      multipleChoice = true;\n    }\n    let counter = 0;\n    // console.log(this.props);\n    if (multipleChoice) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"K.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.putQuestion(questionDataa, multipleChoice)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  createAnswers() {\n    let answers = [this.state.questionsData];\n    const inputElements = Array.from({\n      length: 4\n    }, (_, index) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"buttonAnswer\";\n      button.value = this.props.data[0];\n      return button;\n    });\n\n    // Shuffle the array\n    inputElements.sort(() => Math.random() - 0.5);\n\n    // Append input elements to the body\n    inputElements.forEach(input => {\n      document.querySelector(\"form\").appendChild(input);\n    });\n  }\n  putQuestion(questionData, multipleChoice) {\n    if (multipleChoice) {} else if (multipleChoice == false) {}\n    // this.questionData.forEach((question) => {\n    //   console.log(question.category);\n    // });\n    let currentIndex = this.state.currentIndex;\n    console.log(currentIndex);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divQuestions\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: questionData[currentIndex].question\n      }, currentIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n    this.setState(prevState => ({\n      counter: (prevState.counter + 1) % 3 // Increment and reset to 0 when it reaches 3\n    }));\n\n    if (this.state.questionsAnswered) {\n      this.setState(prevState => ({\n        counter: 0 // Increment and reset to 0 when it reaches 3\n      }));\n    }\n  }\n}\n\nexport default Quiz;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Quiz","constructor","state","questionData","currentIndex","putQuestion","bind","createAnswers","render","console","log","props","data","questionDataa","setState","multipleChoice","propsData","type","counter","children","fileName","_jsxFileName","lineNumber","columnNumber","answers","questionsData","inputElements","Array","from","length","_","index","button","document","createElement","className","value","sort","Math","random","forEach","input","querySelector","appendChild","question","prevState","questionsAnswered"],"sources":["D:/SSD Backup/Desktop/HTML-KIKO/Advanced 2022 JS Projects/2023 React/react-nodejs-trivia app/react-node-trivia-app/src/components/Quiz.js"],"sourcesContent":["import React, { Component } from \"react\";\n// import QuizParams from \"./QuizParams\";\nimport \"../App.css\";\n\n// send variable from Categories, and do apiKeys[cat].name...etc\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionData: null,\n      currentIndex: 0,\n    };\n    this.putQuestion = this.putQuestion.bind(this);\n    this.createAnswers = this.createAnswers.bind(this);\n  }\n  // results is undefined\n  render() {\n    console.log(this.props.data);\n    let questionDataa;\n    this.setState({ questionData: this.props.data }, () => {\n      questionDataa = this.state.questionData;\n      console.log(this.state.questionData);\n      console.log(questionDataa);\n    }); // how can i only send questionDataa after callback\n    let multipleChoice = true;\n    if (this.propsData[this.state.currentIndex.type] == \"multiple\") {\n      multipleChoice = true;\n    }\n    let counter = 0;\n    // console.log(this.props);\n    if (multipleChoice) {\n      return (\n        <div>\n          <h1>K.</h1>\n          <div>\n            <div>{this.putQuestion(questionDataa, multipleChoice)}</div>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  createAnswers() {\n    let answers = [this.state.questionsData];\n\n    const inputElements = Array.from({ length: 4 }, (_, index) => {\n      const button = document.createElement(\"button\");\n      button.type = \"button\";\n      button.className = \"buttonAnswer\";\n      button.value = this.props.data[0];\n      return button;\n    });\n\n    // Shuffle the array\n    inputElements.sort(() => Math.random() - 0.5);\n\n    // Append input elements to the body\n    inputElements.forEach((input) => {\n      document.querySelector(\"form\").appendChild(input);\n    });\n  }\n  putQuestion(questionData, multipleChoice) {\n    if (multipleChoice) {\n    } else if (multipleChoice == false) {\n    }\n    // this.questionData.forEach((question) => {\n    //   console.log(question.category);\n    // });\n    let currentIndex = this.state.currentIndex;\n    console.log(currentIndex);\n    return (\n      <div className=\"divQuestions\">\n        {<p key={currentIndex}>{questionData[currentIndex].question}</p>}\n      </div>\n    );\n    this.setState((prevState) => ({\n      counter: (prevState.counter + 1) % 3, // Increment and reset to 0 when it reaches 3\n    }));\n    if (this.state.questionsAnswered) {\n      this.setState((prevState) => ({\n        counter: 0, // Increment and reset to 0 when it reaches 3\n      }));\n    }\n  }\n}\nexport default Quiz;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}